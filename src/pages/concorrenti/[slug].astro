---
import { getCollection, type CollectionEntry } from 'astro:content';
import LibrosLista from '../../components/LibrosLista.astro';
import Image from 'astro/components/Image.astro';

export async function getStaticPaths() {
  const concorrenti = await getCollection('concorrenti');

  if (!concorrenti) {
    console.error('Failed to fetch concorrenti collection.');
    return [];
  }

  const paths = concorrenti.map(concorrente => ({
    params: { slug: concorrente.slug },
    props: { concorrente },
  }));

  return paths;
}

export async function get({
  params,
}: {
  params: {
    monthRead: string;
    slug: string;
  };
}) {
  const concorrenti = await getCollection('concorrenti');
  const libros = await getCollection('libros');

  if (!concorrenti || !libros) {
    console.error('Failed to fetch collections.');
    return {
      status: 500,
      body: 'Internal Server Error',
    };
  }

  const concorrente = concorrenti.find(c => c.slug === params.slug);

  if (!concorrente) {
    return {
      status: 404,
      body: 'Not Found',
    };
  }

  // Filter books by the specific concorrente
  const librosForConcorrente = libros.filter(
    libro => libro.data.concorrente === params.slug
  );

  // Filter books by monthRead field
  const monthRead = params.monthRead || 'enero'; // You can adjust this to your needs
  const librosForMonth = librosForConcorrente.filter(
    libro => libro.data.monthRead === monthRead
  );

  return {
    props: {
      concorrente,
      librosForMonth,
    },
  };
}

// Define the props type
type Props = {
  concorrente: CollectionEntry<'concorrenti'>;
  librosForMonth: CollectionEntry<'libros'>[];
};

const { concorrente, librosForMonth = [] } = Astro.props;
---

<article class='concorrente-details'>
  <h1>{concorrente.data.nome}</h1>
  <Image src={concorrente.data.image} alt={concorrente.data.nome} width='200' />
  <p>{concorrente.data.username}</p>
  <p>Punti: {concorrente.data.punti}</p>

  <!-- Show books for the specific concorrente and monthRead -->
  <section>
    <h2>Books for {concorrente.data.nome}</h2>
    {
      librosForMonth.length > 0 ? (
        <LibrosLista libros={librosForMonth} />
      ) : (
        <p>No books available for this month.</p>
      )
    }
  </section>
</article>
