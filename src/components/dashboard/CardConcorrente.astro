---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
type Props = {
  concorrente: CollectionEntry<'concorrenti25'>;
};
const { concorrente } = Astro.props;
---

<div
  class='border border-basque-50 p-4 rounded-lg shadow-lg relative flex flex-col items-center space-y-4 md:items-start md:space-y-0 md:space-x-4 md:flex-row bg-white max-w-lg'>
  <Image
    src={concorrente.data.image}
    alt={concorrente.data.alt}
    class='rounded-full w-20 h-20 object-cover border-2 border-basque-50 shadow-sm mx-auto aspect-auto'
    style={{ aspectRatio: '1 / 1' }}
    format='webp'
  />
  <div
    class='flex-1 flex flex-col items-center md:items-start text-center md:text-left'>
    <h3 class='font-bold text-basque-50 text-xl'>{concorrente.data.nome}</h3>
    <p class='text-basque-50 text-sm'>
      Puntuak: <span class='font-semibold'>{concorrente.data.punti}</span>
    </p>
    <!-- Progress Bar -->
    <div class='h-4 w-full bg-gray-200 mt-3 rounded-lg overflow-hidden'>
      <div
        class={`progress-bar`}
        style={{ '--target-width': `${concorrente.data.punti}px` }}>
      </div>
    </div>
  </div>
</div>

<style>
  @keyframes growWidth {
    from {
      width: 0;
    }
    to {
      width: var(--target-width);
    }
  }

  .progress-bar {
    background-color: #4caf50;
    height: 100%;
    border-radius: 5px;
    animation: growWidth 2s ease-out forwards;
  }
</style>

<script>
  // Intersection Observer to trigger animation
  const observer = new IntersectionObserver(
    entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-progress'); // Add the animation class
          observer.unobserve(entry.target); // Stop observing once triggered
        }
      });
    },
    { threshold: 0.5 } // Trigger when 50% of the element is visible
  );

  // Attach observer to all progress bars
  document.querySelectorAll('.progress-bar').forEach(bar => {
    observer.observe(bar);
  });
</script>
