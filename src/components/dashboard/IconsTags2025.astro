---
// filepath: /Users/alessandro-giuzio/Documents/Ale/GitHub-Repo/books/src/components/dashboard/IconsTags2025.astro

import { getCollection } from 'astro:content';
import {
  Book,
  Search,
  Heart,
  Map,
  FlaskConical,
  Sparkles,
  Zap,
  Ghost,
  User,
  Landmark,
  PenLine,
  Smile,
  Drama,
  BookOpen,
  PenTool,
  Shield,
  Sword,
  Plane,
  ChefHat,
  Palette,
  Music,
  Laptop,
  Brain,
  Church,
} from '@lucide/astro';

const libros = await getCollection('libros25');

// Debug: Log the books and their tags
console.log('Total libros found:', libros.length);
console.log('Sample libro with tags:', libros[0]?.data?.tags);

// Fetch all the tags - make sure tags exist and are arrays
const tags = libros
  .filter(libro => libro.data.tags && Array.isArray(libro.data.tags))
  .map(libro => libro.data.tags)
  .flat()
  .filter(tag => tag && typeof tag === 'string');

console.log('All tags:', tags);
console.log('Total tags found:', tags.length);

// Create a frequency map for the tags
const tagCounts = tags.reduce((acc: { [key: string]: number }, tag: string) => {
  acc[tag] = (acc[tag] || 0) + 1;
  return acc;
}, {});

console.log('Tag counts:', tagCounts);

// Sort tags by count (most frequent first)
const sortedTags = (Object.entries(tagCounts) as [string, number][]).sort(
  (a, b) => b[1] - a[1]
);

// Get top 9 most frequent tags instead of random shuffle
const topTags = sortedTags.slice(0, 9);

console.log('Top tags to display:', topTags);

// Icon mapping for different genres using Lucide icons (Astro components) or emoji fallback
const getIconForTag = (tag: string) => {
  const lowerTag = tag.toLowerCase();
  // Assign unique Lucide icons for specific genres first
  if (
    lowerTag.includes('novela gr√°fica') ||
    lowerTag.includes('novela grafica')
  ) {
    return Palette; // or PenTool for graphic/illustrated novels
  }
  if (
    lowerTag.includes('ficci√≥n hist√≥rica') ||
    lowerTag.includes('ficcion historica') ||
    lowerTag.includes('historical fiction')
  ) {
    return Landmark;
  }
  if (lowerTag.includes('novela')) {
    return BookOpen;
  }
  if (lowerTag.includes('ficci√≥n') || lowerTag.includes('fiction')) {
    return Book;
  }
  if (lowerTag.includes('fantasy') || lowerTag.includes('fantas√≠a')) {
    return Sparkles;
  }
  if (lowerTag.includes('mystery') || lowerTag.includes('misterio')) {
    return Search;
  }
  if (lowerTag.includes('thriller')) {
    return Zap;
  }
  if (lowerTag.includes('suspense')) {
    return Shield;
  }
  if (lowerTag.includes('romance') || lowerTag.includes('amor')) {
    return Heart;
  }
  if (lowerTag.includes('adventure') || lowerTag.includes('aventura')) {
    return Map;
  }
  if (lowerTag.includes('science') || lowerTag.includes('ciencia')) {
    return FlaskConical;
  }
  if (lowerTag.includes('horror') || lowerTag.includes('terror')) {
    return Ghost;
  }
  if (lowerTag.includes('biography') || lowerTag.includes('biograf√≠a')) {
    return User;
  }
  if (lowerTag.includes('history') || lowerTag.includes('historia')) {
    return Landmark;
  }
  if (lowerTag.includes('poetry') || lowerTag.includes('poes√≠a')) {
    return PenLine;
  }
  if (lowerTag.includes('comedy') || lowerTag.includes('humor')) {
    return Smile;
  }
  if (lowerTag.includes('drama')) {
    return Drama;
  }
  if (lowerTag.includes('classic') || lowerTag.includes('cl√°sic')) {
    return PenTool;
  }
  if (lowerTag.includes('literatura') || lowerTag.includes('literature')) {
    return PenTool;
  }
  if (lowerTag.includes('crime') || lowerTag.includes('crimen')) {
    return Shield;
  }
  if (lowerTag.includes('war') || lowerTag.includes('guerra')) {
    return Sword;
  }
  if (lowerTag.includes('travel') || lowerTag.includes('viaje')) {
    return Plane;
  }
  if (lowerTag.includes('cooking') || lowerTag.includes('cocina')) {
    return ChefHat;
  }
  if (lowerTag.includes('art') || lowerTag.includes('arte')) {
    return Palette;
  }
  if (lowerTag.includes('music') || lowerTag.includes('m√∫sica')) {
    return Music;
  }
  if (lowerTag.includes('technology') || lowerTag.includes('tecnolog√≠a')) {
    return Laptop;
  }
  if (lowerTag.includes('philosophy') || lowerTag.includes('filosof√≠a')) {
    return Brain;
  }
  if (lowerTag.includes('religion') || lowerTag.includes('religi√≥n')) {
    return Church;
  }
  // Fallback: return null to use emoji fallback
  return null;
};

// Color mapping for different categories
const getColorForTag = (tag: string, index: number) => {
  const lowerTag = tag.toLowerCase();
  // Assign unique background colors for each genre group (order matches icon mapping)
  if (
    lowerTag.includes('novela gr√°fica') ||
    lowerTag.includes('novela grafica')
  ) {
    return 'bg-fuchsia-700'; // graphic novel
  }
  if (
    lowerTag.includes('ficci√≥n hist√≥rica') ||
    lowerTag.includes('ficcion historica') ||
    lowerTag.includes('historical fiction')
  ) {
    return 'bg-yellow-800'; // historical fiction
  }
  if (lowerTag.includes('novela')) {
    return 'bg-blue-700'; // novela
  }
  if (lowerTag.includes('ficci√≥n') || lowerTag.includes('fiction')) {
    return 'bg-blue-500'; // fiction
  }
  if (lowerTag.includes('fantasy') || lowerTag.includes('fantas√≠a')) {
    return 'bg-purple-600';
  }
  if (lowerTag.includes('mystery') || lowerTag.includes('misterio')) {
    return 'bg-gray-800';
  }
  if (lowerTag.includes('thriller')) {
    return 'bg-red-800';
  }
  if (lowerTag.includes('suspense')) {
    return 'bg-gray-600';
  }
  if (lowerTag.includes('romance') || lowerTag.includes('amor')) {
    return 'bg-pink-600';
  }
  if (lowerTag.includes('adventure') || lowerTag.includes('aventura')) {
    return 'bg-orange-600';
  }
  if (lowerTag.includes('science') || lowerTag.includes('ciencia')) {
    return 'bg-green-600';
  }
  if (lowerTag.includes('horror') || lowerTag.includes('terror')) {
    return 'bg-black';
  }
  if (lowerTag.includes('biography') || lowerTag.includes('biograf√≠a')) {
    return 'bg-teal-600';
  }
  if (lowerTag.includes('history') || lowerTag.includes('historia')) {
    return 'bg-stone-600';
  }
  if (lowerTag.includes('poetry') || lowerTag.includes('poes√≠a')) {
    return 'bg-amber-400';
  }
  if (lowerTag.includes('comedy') || lowerTag.includes('humor')) {
    return 'bg-yellow-400';
  }
  if (lowerTag.includes('drama')) {
    return 'bg-rose-800';
  }
  if (lowerTag.includes('classic') || lowerTag.includes('cl√°sic')) {
    return 'bg-amber-600';
  }
  if (lowerTag.includes('literatura') || lowerTag.includes('literature')) {
    return 'bg-amber-700';
  }
  if (lowerTag.includes('crime') || lowerTag.includes('crimen')) {
    return 'bg-gray-900';
  }
  if (lowerTag.includes('war') || lowerTag.includes('guerra')) {
    return 'bg-red-900';
  }
  if (lowerTag.includes('travel') || lowerTag.includes('viaje')) {
    return 'bg-cyan-700';
  }
  if (lowerTag.includes('cooking') || lowerTag.includes('cocina')) {
    return 'bg-lime-700';
  }
  if (lowerTag.includes('art') || lowerTag.includes('arte')) {
    return 'bg-pink-800';
  }
  if (lowerTag.includes('music') || lowerTag.includes('m√∫sica')) {
    return 'bg-indigo-700';
  }
  if (lowerTag.includes('technology') || lowerTag.includes('tecnolog√≠a')) {
    return 'bg-slate-700';
  }
  if (lowerTag.includes('philosophy') || lowerTag.includes('filosof√≠a')) {
    return 'bg-emerald-800';
  }
  if (lowerTag.includes('religion') || lowerTag.includes('religi√≥n')) {
    return 'bg-violet-900';
  }
  // Fallback to cycling colors
  const colors = [
    'bg-indigo-600',
    'bg-red-600',
    'bg-orange-600',
    'bg-cyan-600',
  ];
  return colors[index % colors.length];
};
---

<div
  class='bg-gradient-to-tr from-pink-100 to-pink-200 p-4 sm:p-6 rounded-lg shadow-md md:col-span-2 hover:scale-105 transition-transform'>
  <h4 class='text-gray-700 text-lg sm:text-xl font-medium text-center mb-4'>
    Genero Kuttunak üéâ - Zure gogokoenak!
  </h4>

  {
    tags.length === 0 ? (
      <div class='text-center text-gray-500 py-8'>
        <p>Ez da taginik aurkitu</p>
        <p class='text-sm mt-2'>Ziurtatu liburuek tagak dituztela</p>
      </div>
    ) : (
      <div>
        <ul
          role='list'
          class='mt-3 grid grid-cols-1 gap-5 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3'>
          {topTags.map(([tag, count], index) => (
            <li class='col-span-1 flex rounded-md shadow-sm hover:shadow-lg transition-shadow'>
              <div
                class={`flex w-16 min-w-16 max-w-16 items-center justify-center rounded-l-md ${getColorForTag(tag, index)} text-white`}>
                <span
                  class='text-lg flex items-center justify-center'
                  title={tag}>
                  {(() => {
                    const Icon = getIconForTag(tag);
                    if (Icon) {
                      return <Icon size={22} color='white' />;
                    } else {
                      // fallback emoji
                      // fallback logic matches previous emoji mapping
                      const lowerTag = tag.toLowerCase();
                      if (
                        lowerTag.includes('ficci√≥n') ||
                        lowerTag.includes('fiction') ||
                        lowerTag.includes('novela')
                      )
                        return 'üìö';
                      if (
                        lowerTag.includes('mystery') ||
                        lowerTag.includes('misterio')
                      )
                        return 'üîç';
                      if (
                        lowerTag.includes('romance') ||
                        lowerTag.includes('amor')
                      )
                        return 'üíñ';
                      if (
                        lowerTag.includes('adventure') ||
                        lowerTag.includes('aventura')
                      )
                        return 'üó∫Ô∏è';
                      if (
                        lowerTag.includes('science') ||
                        lowerTag.includes('ciencia')
                      )
                        return 'üî¨';
                      if (
                        lowerTag.includes('fantasy') ||
                        lowerTag.includes('fantas√≠a')
                      )
                        return '‚ú®';
                      if (
                        lowerTag.includes('thriller') ||
                        lowerTag.includes('suspense')
                      )
                        return '‚ö°';
                      if (
                        lowerTag.includes('horror') ||
                        lowerTag.includes('terror')
                      )
                        return 'üëª';
                      if (
                        lowerTag.includes('biography') ||
                        lowerTag.includes('biograf√≠a')
                      )
                        return 'üë§';
                      if (
                        lowerTag.includes('history') ||
                        lowerTag.includes('historia')
                      )
                        return 'üèõÔ∏è';
                      if (
                        lowerTag.includes('poetry') ||
                        lowerTag.includes('poes√≠a')
                      )
                        return '‚úçÔ∏è';
                      if (
                        lowerTag.includes('comedy') ||
                        lowerTag.includes('humor')
                      )
                        return 'üòÑ';
                      if (lowerTag.includes('drama')) return 'üé≠';
                      if (
                        lowerTag.includes('classic') ||
                        lowerTag.includes('cl√°sic')
                      )
                        return 'üìñ';
                      if (
                        lowerTag.includes('literatura') ||
                        lowerTag.includes('literature')
                      )
                        return 'üñãÔ∏è';
                      if (
                        lowerTag.includes('crime') ||
                        lowerTag.includes('crimen')
                      )
                        return 'üõ°Ô∏è';
                      if (
                        lowerTag.includes('war') ||
                        lowerTag.includes('guerra')
                      )
                        return '‚öîÔ∏è';
                      if (
                        lowerTag.includes('travel') ||
                        lowerTag.includes('viaje')
                      )
                        return '‚úàÔ∏è';
                      if (
                        lowerTag.includes('cooking') ||
                        lowerTag.includes('cocina')
                      )
                        return 'üë®‚Äçüç≥';
                      if (lowerTag.includes('art') || lowerTag.includes('arte'))
                        return 'üé®';
                      if (
                        lowerTag.includes('music') ||
                        lowerTag.includes('m√∫sica')
                      )
                        return 'üéµ';
                      if (
                        lowerTag.includes('technology') ||
                        lowerTag.includes('tecnolog√≠a')
                      )
                        return 'üíª';
                      if (
                        lowerTag.includes('philosophy') ||
                        lowerTag.includes('filosof√≠a')
                      )
                        return 'üß†';
                      if (
                        lowerTag.includes('religion') ||
                        lowerTag.includes('religi√≥n')
                      )
                        return '‚õ™';
                      return 'üìù';
                    }
                  })()}
                </span>
              </div>
              <div class='flex flex-1 items-center justify-between truncate rounded-r-md border-b border-r border-t border-gray-200 bg-white hover:bg-gray-50 transition-colors'>
                <div class='flex-1 truncate px-4 py-2 text-sm'>
                  <span class='block font-medium text-gray-900 mb-1'>
                    {tag}
                  </span>
                  <p class='text-gray-500'>
                    {count} {count === 1 ? 'Liburu' : 'Liburuak'}
                  </p>
                </div>
                {/* <div class='pr-4'>
                  <svg
                    class='h-4 w-4 text-gray-400'
                    fill='none'
                    viewBox='0 0 24 24'
                    stroke='currentColor'>
                    <path
                      stroke-linecap='round'
                      stroke-linejoin='round'
                      stroke-width='2'
                      d='M9 5l7 7-7 7'
                    />
                  </svg>
                </div> */}
              </div>
            </li>
          ))}
        </ul>
      </div>
    )
  }
</div>
